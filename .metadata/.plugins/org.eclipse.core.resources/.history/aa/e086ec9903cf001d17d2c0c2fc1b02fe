package com.Hospital.demo.Hospital;

import static org.assertj.core.api.Assertions.assertThat;
import static org.mockito.ArgumentMatchers.isNotNull;
import static org.mockito.ArgumentMatchers.isNull;

import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

@SpringBootTest
class ApplicationTests {

	@Autowired
	private PatientController patientController;
	@Autowired
	private PatientRepo pRepo;
	
	private Patient pat;
	

	@Test
	void contextLoads() {
	}
	
	//4. testing createPatient
	
	@Test
	public void testcreatePatientmethod() {
		
		Patient pat = pRepo.save(new Patient(101,"geetha",9999,34));
		assertThat(pat.getPatientId()).isGreaterThan(0);
		
		

	}
	
	
	// 5.getPatient details by id/{PatientId
	@Test
	public void testgetpatientDetails() {
		Patient pat = pRepo.save(new Patient(101,"geetha",9999,34));
		Patient PatientlistbyId = pRepo.findById(pat.getPatientId()).get();
		assertThat(PatientlistbyId).isNotNull();
	}
	
	//getAllPatientList
	@Test
	public void testgetAllpatientDetails() {
		
		Patient patient = new Patient(101,"geetha",9999,34);
		Patient patient1 = new Patient(102,"kavita",5999,24);
				Iterable <Patient> patientlist = pRepo.findAll();
				assertThat(patientlist).isNotNull();
				assertThat(patientlist).iterator()).isNotNull();
	}
	//7.updatePatient/{patientId			
	@Test
	public void testupdatePatient() {
		
		Patient patient =pRepo.save(new patient (101,"geetha",9999,34));
		Patient updatePatient =pRepo.findAllById(Patient.getpatientId()).get();
		updatePatient.setPatientName("manasa");
		updatePatient.setPatientAge(50);
		Patient updatepatient pRepo.save(updatePatient);
		assertThat(updatePpatient.getPpatientName()).isEqual to("Manasa");
		assertThat(updatePpatient.getPpatientage()).isEqual to(50);
	}
	
	//8. "DeletePatient/{patientID

	public void testdeletePatient() {
		Patient patient pRepo.save(new patient(101,"geetha",9999,34));
		pRepo.deleteById(patient.getPatientId());
		optional<Patient>optional patient = pRepo.findById(patient.getpatientId());
		assertThat(ptional patient).isNull();
	}
	}
	
	
////1.createDoctor
public void testcreateDoctor() {


doctor doctort =doctorRepository.save(new Doctor(101,"geetha","99999",9177.2));
		assertThat(doctor.getDoctorId()).isGreaterThan(0);
}
	
//2.getDoctor/{DoctorId
@Test
public void testgetDoctorDetails() {
	Doctor  doctorRepository = doctorRepository.save(new doctor(101,"geetha",9999,34));
	Doctor DoctorlistbyId = doctorRepository.findById(Patient.getDoctorId());
	assertThat(DoctorlistbyId).isNotNull();
}
//3.getAllDoctorList
public void testgetAllpatientDetails() {
	
	Doctor doctor = new Doctor(101,"geetha",9999,34);
	Doctor doctor = new Doctor(102,"kavita"",5999,24);"
			Iterable <doctor>Doctorlist = doctorRepository.findAll();
			assertThat(Doctorlist).isNotNull();
			assertThat(Doctortlist).iterator()).isNotNull();
}

//4.updateDoctor/{DoctorId


@Test
public void testupdatePatient() {
	
	Doctor doctor =pRepo.save(new Doctor (101,"geetha",9999,34));
	Doctor updateDoctort =doctorRepository.findAllById(Doctor.getDoctorId()).get();
	updateDoctor.setDoctorName("manasa");
	updateDoctor.setDoctorAge(50);
	Doctor updateDoctor doctorRepository.save(updatePatient);
	assertThat(updateDoctor.getDoctorName()).isEqual to("Manasa");
	assertThat(updateDoctor.getDoctorage()).isEqual to(50);
}

//5. "DeleteDoctor/{DoctorID



public void testdeleteDoctor() {
	Doctor doctor pRepo.save(new Doctor(101,"geetha",9999,34));
	doctorRepository.deleteById(Doctor.getDoctorId());
	optional<Doctor>optional Doctor = doctorRepository.findById(Doctor.getDoctorId());
	assertThat(ptional doctor).isNull();

